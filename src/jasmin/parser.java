
//----------------------------------------------------
// The following code was generated by Java(tm) CUP v0.9d
// Thu Mar 08 14:20:38 EST 2001
//----------------------------------------------------

package jasmin;

import java_cup.runtime.*;
import jas.*;
import java.io.*;
import java.util.Hashtable;

public class parser extends java_cup.runtime.lr_parser {

  /** constructor */
  public parser() {super();}

  /** production table */
  protected static final short _production_table[][] = {
        {20, 7},     {0, 2},     {33, 3},     {33, 0},     {8, 4}, 
        {8, 4},     {1, 1},     {59, 0},     {58, 2},     {6, 1}, 
        {6, 0},     {5, 2},     {5, 1},     {4, 1},     {4, 1}, 
        {4, 1},     {4, 1},     {4, 1},     {4, 1},     {4, 1}, 
        {4, 1},     {4, 1},     {4, 1},     {4, 1},     {37, 3}, 
        {17, 1},     {17, 0},     {18, 2},     {18, 1},     {19, 3}, 
        {15, 1},     {15, 0},     {13, 2},     {13, 1},     {54, 2}, 
        {54, 1},     {14, 6},     {2, 2},     {2, 0},     {3, 1}, 
        {3, 1},     {3, 1},     {30, 1},     {30, 0},     {28, 2}, 
        {28, 1},     {50, 2},     {50, 1},     {29, 3},     {29, 2}, 
        {10, 4},     {12, 3},     {35, 2},     {35, 1},     {60, 0}, 
        {34, 3},     {36, 1},     {36, 1},     {36, 1},     {36, 1}, 
        {36, 0},     {21, 2},     {11, 2},     {11, 2},     {11, 2}, 
        {11, 2},     {11, 2},     {11, 2},     {11, 2},     {46, 2}, 
        {45, 8},     {45, 4},     {22, 2},     {40, 1},     {44, 1}, 
        {7, 7},     {31, 2},     {31, 2},     {31, 2},     {31, 2}, 
        {16, 1},     {16, 1},     {32, 1},     {32, 3},     {32, 2}, 
        {32, 2},     {32, 2},     {32, 3},     {32, 3},     {32, 2}, 
        {9, 2},     {9, 2},     {23, 3},     {24, 1},     {27, 2}, 
        {27, 1},     {26, 4},     {25, 3},     {38, 3},     {39, 2}, 
        {39, 3},     {43, 2},     {43, 1},     {42, 2},     {41, 3}, 
        {47, 1},     {47, 0},     {48, 2},     {48, 1},     {49, 4}, 
        {51, 1},     {52, 2},     {52, 1},     {53, 4},     {55, 1}, 
        {56, 2},     {56, 1},     {57, 4}  };

  /** access to production table */
  public short[][] production_table() {return _production_table;}

  /** parse action table */
  protected static final short[][] _action_table = {
    /*0*/{3,-4,11,2,15,-4,-1,0},
    /*1*/{43,191,-1,0},
    /*2*/{3,7,15,6,-1,0},
    /*3*/{0,5,-1,0},
    /*4*/{0,-2,-1,0},
    /*5*/{25,-8,26,-8,27,-8,28,-8,29,-8,30,-8,31,-8,32,-8,33,-8,34,-8,35,-8,43,-8,-1,0},
    /*6*/{25,-8,26,-8,27,-8,28,-8,29,-8,30,-8,31,-8,32,-8,33,-8,34,-8,35,-8,43,-8,-1,0},
    /*7*/{10,10,-1,0},
    /*8*/{0,-27,5,-27,8,-27,14,15,17,-27,-1,0},
    /*9*/{43,11,-1,0},
    /*10*/{23,-7,40,-7,-1,0},
    /*11*/{40,13,-1,0},
    /*12*/{0,-25,5,-25,8,-25,14,-25,17,-25,-1,0},
    /*13*/{0,-29,5,-29,8,-29,14,-29,17,-29,-1,0},
    /*14*/{43,11,-1,0},
    /*15*/{0,-107,5,-107,8,-107,17,22,-1,0},
    /*16*/{0,-26,5,-26,8,-26,14,15,17,-26,-1,0},
    /*17*/{0,-28,5,-28,8,-28,14,-28,17,-28,-1,0},
    /*18*/{0,-32,5,29,8,-32,-1,0},
    /*19*/{0,-106,5,-106,8,-106,17,22,-1,0},
    /*20*/{0,-109,5,-109,8,-109,17,-109,-1,0},
    /*21*/{43,23,-1,0},
    /*22*/{42,24,-1,0},
    /*23*/{40,25,-1,0},
    /*24*/{0,-110,5,-110,8,-110,17,-110,-1,0},
    /*25*/{0,-108,5,-108,8,-108,17,-108,-1,0},
    /*26*/{0,-44,8,69,-1,0},
    /*27*/{0,-36,5,-36,8,-36,18,61,-1,0},
    /*28*/{25,-8,26,-8,27,-8,28,-8,29,-8,30,-8,31,-8,32,-8,33,-8,34,-8,35,-8,42,-8,-1,0},
    /*29*/{0,-34,5,-34,8,-34,-1,0},
    /*30*/{0,-31,5,29,8,-31,-1,0},
    /*31*/{0,-33,5,-33,8,-33,-1,0},
    /*32*/{42,50,-1,0},
    /*33*/{25,35,26,46,27,43,28,39,29,44,30,40,31,36,32,37,33,45,34,42,35,41,42,-11,43,-11,-1,0},
    /*34*/{25,-24,26,-24,27,-24,28,-24,29,-24,30,-24,31,-24,32,-24,33,-24,34,-24,35,-24,42,-24,43,-24,-1,0},
    /*35*/{25,-14,26,-14,27,-14,28,-14,29,-14,30,-14,31,-14,32,-14,33,-14,34,-14,35,-14,42,-14,43,-14,-1,0},
    /*36*/{25,-17,26,-17,27,-17,28,-17,29,-17,30,-17,31,-17,32,-17,33,-17,34,-17,35,-17,42,-17,43,-17,-1,0},
    /*37*/{25,-13,26,-13,27,-13,28,-13,29,-13,30,-13,31,-13,32,-13,33,-13,34,-13,35,-13,42,-13,43,-13,-1,0},
    /*38*/{25,-22,26,-22,27,-22,28,-22,29,-22,30,-22,31,-22,32,-22,33,-22,34,-22,35,-22,42,-22,43,-22,-1,0},
    /*39*/{25,-16,26,-16,27,-16,28,-16,29,-16,30,-16,31,-16,32,-16,33,-16,34,-16,35,-16,42,-16,43,-16,-1,0},
    /*40*/{25,-20,26,-20,27,-20,28,-20,29,-20,30,-20,31,-20,32,-20,33,-20,34,-20,35,-20,42,-20,43,-20,-1,0},
    /*41*/{25,-21,26,-21,27,-21,28,-21,29,-21,30,-21,31,-21,32,-21,33,-21,34,-21,35,-21,42,-21,43,-21,-1,0},
    /*42*/{25,-23,26,-23,27,-23,28,-23,29,-23,30,-23,31,-23,32,-23,33,-23,34,-23,35,-23,42,-23,43,-23,-1,0},
    /*43*/{25,-15,26,-15,27,-15,28,-15,29,-15,30,-15,31,-15,32,-15,33,-15,34,-15,35,-15,42,-15,43,-15,-1,0},
    /*44*/{25,-19,26,-19,27,-19,28,-19,29,-19,30,-19,31,-19,32,-19,33,-19,34,-19,35,-19,42,-19,43,-19,-1,0},
    /*45*/{25,-18,26,-18,27,-18,28,-18,29,-18,30,-18,31,-18,32,-18,33,-18,34,-18,35,-18,42,-18,43,-18,-1,0},
    /*46*/{25,35,26,46,27,43,28,39,29,44,30,40,31,36,32,37,33,45,34,42,35,41,42,-10,43,-10,-1,0},
    /*47*/{42,-9,43,-9,-1,0},
    /*48*/{25,-12,26,-12,27,-12,28,-12,29,-12,30,-12,31,-12,32,-12,33,-12,34,-12,35,-12,42,-12,43,-12,-1,0},
    /*49*/{43,51,-1,0},
    /*50*/{39,52,40,-39,-1,0},
    /*51*/{42,55,45,57,46,58,-1,0},
    /*52*/{40,54,-1,0},
    /*53*/{0,-37,5,-37,8,-37,18,-37,-1,0},
    /*54*/{40,-42,-1,0},
    /*55*/{40,-38,-1,0},
    /*56*/{40,-40,-1,0},
    /*57*/{40,-41,-1,0},
    /*58*/{0,-35,5,-35,8,-35,-1,0},
    /*59*/{0,-117,5,-117,8,-117,18,-117,-1,0},
    /*60*/{43,64,-1,0},
    /*61*/{0,-115,5,-115,8,-115,18,61,-1,0},
    /*62*/{0,-116,5,-116,8,-116,18,-116,-1,0},
    /*63*/{42,65,-1,0},
    /*64*/{40,66,-1,0},
    /*65*/{0,-118,5,-118,8,-118,18,-118,-1,0},
    /*66*/{0,-1,-1,0},
    /*67*/{0,-48,8,-48,19,177,-1,0},
    /*68*/{25,-8,26,-8,27,-8,28,-8,29,-8,30,-8,31,-8,32,-8,33,-8,34,-8,35,-8,43,-8,-1,0},
    /*69*/{1,-55,2,-55,4,76,6,-55,7,-55,9,-55,12,-55,13,-55,16,-55,36,-55,37,-55,40,-55,43,-55,44,-55,-1,0},
    /*70*/{0,-46,8,-46,-1,0},
    /*71*/{0,-43,8,69,-1,0},
    /*72*/{0,-45,8,-45,-1,0},
    /*73*/{1,94,2,87,6,85,7,95,9,96,12,100,13,84,16,89,36,93,37,92,40,-61,43,83,44,91,-1,0},
    /*74*/{1,-55,2,-55,4,76,6,-55,7,-55,9,-55,12,-55,13,-55,16,-55,36,-55,37,-55,40,-55,43,-55,44,-55,-1,0},
    /*75*/{24,79,-1,0},
    /*76*/{1,-54,2,-54,4,-54,6,-54,7,-54,9,-54,12,-54,13,-54,16,-54,36,-54,37,-54,40,-54,43,-54,44,-54,-1,0},
    /*77*/{0,-50,8,-50,19,-50,-1,0},
    /*78*/{40,80,-1,0},
    /*79*/{0,-52,8,-52,19,-52,-1,0},
    /*80*/{1,-53,2,-53,4,-53,6,-53,7,-53,9,-53,12,-53,13,-53,16,-53,36,-53,37,-53,40,-53,43,-53,44,-53,-1,0},
    /*81*/{0,-49,8,-49,19,-49,-1,0},
    /*82*/{41,171,-1,0},
    /*83*/{45,163,-1,0},
    /*84*/{43,160,-1,0},
    /*85*/{40,-60,-1,0},
    /*86*/{43,11,-1,0},
    /*87*/{40,-58,-1,0},
    /*88*/{43,148,-1,0},
    /*89*/{40,147,-1,0},
    /*90*/{40,-83,42,140,43,141,45,142,46,143,-1,0},
    /*91*/{45,127,-1,0},
    /*92*/{40,111,-1,0},
    /*93*/{40,-59,-1,0},
    /*94*/{45,110,-1,0},
    /*95*/{43,104,-1,0},
    /*96*/{40,-81,-1,0},
    /*97*/{40,-57,-1,0},
    /*98*/{40,-82,-1,0},
    /*99*/{43,11,-1,0},
    /*100*/{40,-75,-1,0},
    /*101*/{40,-66,-1,0},
    /*102*/{40,-68,-1,0},
    /*103*/{42,106,43,105,45,107,46,108,-1,0},
    /*104*/{40,-78,-1,0},
    /*105*/{40,-80,-1,0},
    /*106*/{40,-77,-1,0},
    /*107*/{40,-79,-1,0},
    /*108*/{40,-65,-1,0},
    /*109*/{40,-74,-1,0},
    /*110*/{45,-94,-1,0},
    /*111*/{45,116,-1,0},
    /*112*/{40,-91,-1,0},
    /*113*/{38,-96,45,-96,-1,0},
    /*114*/{38,120,45,116,-1,0},
    /*115*/{41,117,-1,0},
    /*116*/{43,118,-1,0},
    /*117*/{40,119,-1,0},
    /*118*/{38,-97,45,-97,-1,0},
    /*119*/{41,123,-1,0},
    /*120*/{40,-93,-1,0},
    /*121*/{38,-95,45,-95,-1,0},
    /*122*/{43,124,-1,0},
    /*123*/{40,-98,-1,0},
    /*124*/{43,131,-1,0},
    /*125*/{40,-92,-1,0},
    /*126*/{40,128,45,129,-1,0},
    /*127*/{43,-100,-1,0},
    /*128*/{40,130,-1,0},
    /*129*/{43,-101,-1,0},
    /*130*/{40,139,-1,0},
    /*131*/{38,134,43,131,-1,0},
    /*132*/{38,-103,43,-103,-1,0},
    /*133*/{41,137,-1,0},
    /*134*/{38,-102,43,-102,-1,0},
    /*135*/{40,-99,-1,0},
    /*136*/{43,138,-1,0},
    /*137*/{40,-105,-1,0},
    /*138*/{38,-104,43,-104,-1,0},
    /*139*/{40,-90,-1,0},
    /*140*/{40,-87,43,145,45,146,-1,0},
    /*141*/{40,-85,45,144,-1,0},
    /*142*/{40,-86,-1,0},
    /*143*/{40,-84,-1,0},
    /*144*/{40,-89,-1,0},
    /*145*/{40,-88,-1,0},
    /*146*/{1,-56,2,-56,4,-56,6,-56,7,-56,9,-56,12,-56,13,-56,16,-56,36,-56,37,-56,40,-56,43,-56,44,-56,-1,0},
    /*147*/{42,150,-1,0},
    /*148*/{40,-69,-1,0},
    /*149*/{40,-70,-1,0},
    /*150*/{40,-67,-1,0},
    /*151*/{23,153,-1,0},
    /*152*/{43,154,-1,0},
    /*153*/{20,155,-1,0},
    /*154*/{43,156,-1,0},
    /*155*/{21,157,-1,0},
    /*156*/{43,158,-1,0},
    /*157*/{40,-76,-1,0},
    /*158*/{40,-64,-1,0},
    /*159*/{45,161,-1,0},
    /*160*/{40,-73,-1,0},
    /*161*/{40,-63,-1,0},
    /*162*/{22,164,-1,0},
    /*163*/{43,165,-1,0},
    /*164*/{43,166,-1,0},
    /*165*/{23,167,40,-72,-1,0},
    /*166*/{43,168,-1,0},
    /*167*/{20,169,-1,0},
    /*168*/{43,170,-1,0},
    /*169*/{40,-71,-1,0},
    /*170*/{40,-62,-1,0},
    /*171*/{43,173,-1,0},
    /*172*/{40,174,-1,0},
    /*173*/{1,-51,2,-51,4,-51,6,-51,7,-51,9,-51,12,-51,13,-51,16,-51,36,-51,37,-51,40,-51,43,-51,44,-51,-1,0},
    /*174*/{0,-47,8,-47,-1,0},
    /*175*/{0,-113,8,-113,19,-113,-1,0},
    /*176*/{43,180,-1,0},
    /*177*/{0,-111,8,-111,19,177,-1,0},
    /*178*/{0,-112,8,-112,19,-112,-1,0},
    /*179*/{42,181,-1,0},
    /*180*/{40,182,-1,0},
    /*181*/{0,-114,8,-114,19,-114,-1,0},
    /*182*/{40,184,-1,0},
    /*183*/{0,-30,5,-30,8,-30,14,-30,17,-30,-1,0},
    /*184*/{43,11,-1,0},
    /*185*/{40,187,-1,0},
    /*186*/{10,-5,-1,0},
    /*187*/{43,11,-1,0},
    /*188*/{40,190,-1,0},
    /*189*/{10,-6,-1,0},
    /*190*/{40,192,-1,0},
    /*191*/{3,-3,15,-3,-1,0},
  };

  /** access to parse action table */
  public short[][] action_table() {return _action_table;}

  /** reduce_goto table */
  protected static final short[][] _reduce_table = {
    /*0*/{20,3,33,2,-1,-1},
    /*1*/{-1,-1},
    /*2*/{8,7,-1,-1},
    /*3*/{-1,-1},
    /*4*/{-1,-1},
    /*5*/{58,187,59,33,-1,-1},
    /*6*/{58,184,59,33,-1,-1},
    /*7*/{37,8,-1,-1},
    /*8*/{17,15,18,16,19,13,-1,-1},
    /*9*/{1,11,-1,-1},
    /*10*/{-1,-1},
    /*11*/{-1,-1},
    /*12*/{-1,-1},
    /*13*/{-1,-1},
    /*14*/{1,182,-1,-1},
    /*15*/{47,18,48,19,49,20,-1,-1},
    /*16*/{19,17,-1,-1},
    /*17*/{-1,-1},
    /*18*/{13,30,14,27,15,26,54,29,-1,-1},
    /*19*/{49,25,-1,-1},
    /*20*/{-1,-1},
    /*21*/{-1,-1},
    /*22*/{-1,-1},
    /*23*/{-1,-1},
    /*24*/{-1,-1},
    /*25*/{-1,-1},
    /*26*/{10,69,28,71,29,67,30,66,50,70,-1,-1},
    /*27*/{55,58,56,61,57,59,-1,-1},
    /*28*/{58,32,59,33,-1,-1},
    /*29*/{-1,-1},
    /*30*/{14,27,54,31,-1,-1},
    /*31*/{-1,-1},
    /*32*/{-1,-1},
    /*33*/{4,37,5,46,6,47,-1,-1},
    /*34*/{-1,-1},
    /*35*/{-1,-1},
    /*36*/{-1,-1},
    /*37*/{-1,-1},
    /*38*/{-1,-1},
    /*39*/{-1,-1},
    /*40*/{-1,-1},
    /*41*/{-1,-1},
    /*42*/{-1,-1},
    /*43*/{-1,-1},
    /*44*/{-1,-1},
    /*45*/{-1,-1},
    /*46*/{4,48,-1,-1},
    /*47*/{-1,-1},
    /*48*/{-1,-1},
    /*49*/{-1,-1},
    /*50*/{2,52,-1,-1},
    /*51*/{3,55,-1,-1},
    /*52*/{-1,-1},
    /*53*/{-1,-1},
    /*54*/{-1,-1},
    /*55*/{-1,-1},
    /*56*/{-1,-1},
    /*57*/{-1,-1},
    /*58*/{-1,-1},
    /*59*/{-1,-1},
    /*60*/{-1,-1},
    /*61*/{57,62,-1,-1},
    /*62*/{-1,-1},
    /*63*/{-1,-1},
    /*64*/{-1,-1},
    /*65*/{-1,-1},
    /*66*/{-1,-1},
    /*67*/{51,174,52,177,53,175,-1,-1},
    /*68*/{58,171,59,33,-1,-1},
    /*69*/{12,77,34,76,35,74,60,73,-1,-1},
    /*70*/{-1,-1},
    /*71*/{10,69,29,67,50,72,-1,-1},
    /*72*/{-1,-1},
    /*73*/{9,98,11,87,16,97,21,85,32,96,36,89,-1,-1},
    /*74*/{12,81,34,80,60,73,-1,-1},
    /*75*/{-1,-1},
    /*76*/{-1,-1},
    /*77*/{-1,-1},
    /*78*/{-1,-1},
    /*79*/{-1,-1},
    /*80*/{-1,-1},
    /*81*/{-1,-1},
    /*82*/{-1,-1},
    /*83*/{45,161,-1,-1},
    /*84*/{22,158,-1,-1},
    /*85*/{-1,-1},
    /*86*/{1,151,7,150,-1,-1},
    /*87*/{-1,-1},
    /*88*/{46,148,-1,-1},
    /*89*/{-1,-1},
    /*90*/{-1,-1},
    /*91*/{38,125,39,124,-1,-1},
    /*92*/{23,112,24,111,-1,-1},
    /*93*/{-1,-1},
    /*94*/{40,108,-1,-1},
    /*95*/{31,102,-1,-1},
    /*96*/{-1,-1},
    /*97*/{-1,-1},
    /*98*/{-1,-1},
    /*99*/{1,100,44,101,-1,-1},
    /*100*/{-1,-1},
    /*101*/{-1,-1},
    /*102*/{-1,-1},
    /*103*/{-1,-1},
    /*104*/{-1,-1},
    /*105*/{-1,-1},
    /*106*/{-1,-1},
    /*107*/{-1,-1},
    /*108*/{-1,-1},
    /*109*/{-1,-1},
    /*110*/{-1,-1},
    /*111*/{26,113,27,114,-1,-1},
    /*112*/{-1,-1},
    /*113*/{-1,-1},
    /*114*/{25,120,26,121,-1,-1},
    /*115*/{-1,-1},
    /*116*/{-1,-1},
    /*117*/{-1,-1},
    /*118*/{-1,-1},
    /*119*/{-1,-1},
    /*120*/{-1,-1},
    /*121*/{-1,-1},
    /*122*/{-1,-1},
    /*123*/{-1,-1},
    /*124*/{42,132,43,131,-1,-1},
    /*125*/{-1,-1},
    /*126*/{-1,-1},
    /*127*/{-1,-1},
    /*128*/{-1,-1},
    /*129*/{-1,-1},
    /*130*/{-1,-1},
    /*131*/{41,135,42,134,-1,-1},
    /*132*/{-1,-1},
    /*133*/{-1,-1},
    /*134*/{-1,-1},
    /*135*/{-1,-1},
    /*136*/{-1,-1},
    /*137*/{-1,-1},
    /*138*/{-1,-1},
    /*139*/{-1,-1},
    /*140*/{-1,-1},
    /*141*/{-1,-1},
    /*142*/{-1,-1},
    /*143*/{-1,-1},
    /*144*/{-1,-1},
    /*145*/{-1,-1},
    /*146*/{-1,-1},
    /*147*/{-1,-1},
    /*148*/{-1,-1},
    /*149*/{-1,-1},
    /*150*/{-1,-1},
    /*151*/{-1,-1},
    /*152*/{-1,-1},
    /*153*/{-1,-1},
    /*154*/{-1,-1},
    /*155*/{-1,-1},
    /*156*/{-1,-1},
    /*157*/{-1,-1},
    /*158*/{-1,-1},
    /*159*/{-1,-1},
    /*160*/{-1,-1},
    /*161*/{-1,-1},
    /*162*/{-1,-1},
    /*163*/{-1,-1},
    /*164*/{-1,-1},
    /*165*/{-1,-1},
    /*166*/{-1,-1},
    /*167*/{-1,-1},
    /*168*/{-1,-1},
    /*169*/{-1,-1},
    /*170*/{-1,-1},
    /*171*/{-1,-1},
    /*172*/{-1,-1},
    /*173*/{-1,-1},
    /*174*/{-1,-1},
    /*175*/{-1,-1},
    /*176*/{-1,-1},
    /*177*/{53,178,-1,-1},
    /*178*/{-1,-1},
    /*179*/{-1,-1},
    /*180*/{-1,-1},
    /*181*/{-1,-1},
    /*182*/{-1,-1},
    /*183*/{-1,-1},
    /*184*/{1,185,-1,-1},
    /*185*/{-1,-1},
    /*186*/{-1,-1},
    /*187*/{1,188,-1,-1},
    /*188*/{-1,-1},
    /*189*/{-1,-1},
    /*190*/{-1,-1},
    /*191*/{-1,-1},
  };

  /** access to reduce_goto table */
  public short[][] reduce_table() {return _reduce_table;}

  /** instance of action encapsulation class */
  protected CUP$actions action_obj;

  /** action encapsulation object initializer */
  protected void init_actions()
    {
      action_obj = new CUP$actions();
    }

  /** invoke a user supplied parse action */
  public java_cup.runtime.symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$do_action(act_num, parser, stack, top);
  }

  /** start state */
  public int start_state() {return 0;}
  /** start production */
  public int start_production() {return 1;}

  /** EOF symbol index */
  public int EOF_sym() {return 0;}

  /** error symbol index */
  public int error_sym() {return 1;}


  /** user initialization */
  public void user_init() throws java.lang.Exception
    {

	action_obj.scanner = scanner;
	action_obj.classFile = classFile;

    }

  /** scan to get the next token */
  public java_cup.runtime.token scan()
    throws java.lang.Exception
    {

    return scanner.next_token();

    }



	// parser code

	public Scanner scanner;
	public ClassFile classFile;
	
	public void report_error(String message, Object info)  {
    	classFile.report_error("Warning - " + message);
	}

	public void report_fatal_error(String message, Object info)  {
    	classFile.report_error("Error - " + message);
    	// System.exit(-1);
	}

	parser(ClassFile classFile, Scanner scanner) {
		super();

		this.scanner = scanner;
	    this.classFile = classFile;
	}

};

/** JavaCup generated class to encapsulate user supplied action code.*/
class CUP$actions {


    short access_val;
	public ClassFile classFile;
    public Scanner scanner;


  /** Constructor */
  CUP$actions() { }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.symbol CUP$do_action(
    int                        CUP$act_num,
    java_cup.runtime.lr_parser CUP$parser,
    java.util.Stack            CUP$stack,
    int                        CUP$top)
    throws java.lang.Exception
    {
      /* object for return from actions */
      java_cup.runtime.symbol CUP$result;

      /* select the action based on the action number */
      switch (CUP$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // field_attr_spec ::= DFIELD_ATTR Word Str SEP 
            {
              CUP$result = new symbol(/*field_attr_spec*/57);
              
		 byte[] data = Base64.decode((/*v*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val.toCharArray());
                classFile.addGenericAttrToField((/*w*/(str_token)CUP$stack.elementAt(CUP$top-2)).str_val, data);
          
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // field_attr_list ::= field_attr_spec 
            {
              CUP$result = new symbol(/*field_attr_list*/56);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // field_attr_list ::= field_attr_list field_attr_spec 
            {
              CUP$result = new symbol(/*field_attr_list*/56);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // field_attrs ::= field_attr_list 
            {
              CUP$result = new symbol(/*field_attrs*/55);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // method_attr_spec ::= DMETHOD_ATTR Word Str SEP 
            {
              CUP$result = new symbol(/*method_attr_spec*/53);
              
		 byte[] data = Base64.decode((/*v*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val.toCharArray());
                classFile.addGenericAttrToMethod((/*w*/(str_token)CUP$stack.elementAt(CUP$top-2)).str_val, data);	
          
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // method_attr_list ::= method_attr_spec 
            {
              CUP$result = new symbol(/*method_attr_list*/52);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // method_attr_list ::= method_attr_list method_attr_spec 
            {
              CUP$result = new symbol(/*method_attr_list*/52);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // method_attrs ::= method_attr_list 
            {
              CUP$result = new symbol(/*method_attrs*/51);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // class_attr_spec ::= DCLASS_ATTR Word Str SEP 
            {
              CUP$result = new symbol(/*class_attr_spec*/49);
              
		byte[] data = Base64.decode((/*v*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val.toCharArray());
                classFile.addGenericAttrToClass(new GenericAttr((/*w*/(str_token)CUP$stack.elementAt(CUP$top-2)).str_val, data));             
          
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // class_attr_list ::= class_attr_spec 
            {
              CUP$result = new symbol(/*class_attr_list*/48);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // class_attr_list ::= class_attr_list class_attr_spec 
            {
              CUP$result = new symbol(/*class_attr_list*/48);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // class_attrs ::= 
            {
              CUP$result = new symbol(/*class_attrs*/47);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // class_attrs ::= class_attr_list 
            {
              CUP$result = new symbol(/*class_attrs*/47);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // table_default ::= DEFAULT COLON Word 
            {
              CUP$result = new symbol(/*table_default*/41);
              
            classFile.endTableswitch((/*w*/(str_token)CUP$stack.elementAt(CUP$top-0)).str_val);
        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // table_entry ::= Word SEP 
            {
              CUP$result = new symbol(/*table_entry*/42);
              
            classFile.addTableswitch((/*w*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val);
        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // table_list ::= table_entry 
            {
              CUP$result = new symbol(/*table_list*/43);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // table_list ::= table_list table_entry 
            {
              CUP$result = new symbol(/*table_list*/43);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // table_args ::= Int Int SEP 
            {
              CUP$result = new symbol(/*table_args*/39);
              
            classFile.newTableswitch((/*low*/(int_token)CUP$stack.elementAt(CUP$top-2)).int_val, (/*high*/(int_token)CUP$stack.elementAt(CUP$top-1)).int_val);
        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // table_args ::= Int SEP 
            {
              CUP$result = new symbol(/*table_args*/39);
              
            classFile.newTableswitch((/*low*/(int_token)CUP$stack.elementAt(CUP$top-1)).int_val);
        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // table ::= table_args table_list table_default 
            {
              CUP$result = new symbol(/*table*/38);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // lookup_default ::= DEFAULT COLON Word 
            {
              CUP$result = new symbol(/*lookup_default*/25);
               classFile.endLookupswitch((/*w*/(str_token)CUP$stack.elementAt(CUP$top-0)).str_val); 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // lookup_entry ::= Int COLON Word SEP 
            {
              CUP$result = new symbol(/*lookup_entry*/26);
              
            classFile.addLookupswitch((/*i*/(int_token)CUP$stack.elementAt(CUP$top-3)).int_val, (/*w*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val);
        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // lookup_list ::= lookup_entry 
            {
              CUP$result = new symbol(/*lookup_list*/27);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // lookup_list ::= lookup_list lookup_entry 
            {
              CUP$result = new symbol(/*lookup_list*/27);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // lookup_args ::= SEP 
            {
              CUP$result = new symbol(/*lookup_args*/24);
               classFile.newLookupswitch(); 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // lookup ::= lookup_args lookup_list lookup_default 
            {
              CUP$result = new symbol(/*lookup*/23);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // complex_instruction ::= TABLESWITCH table 
            {
              CUP$result = new symbol(/*complex_instruction*/9);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // complex_instruction ::= LOOKUPSWITCH lookup 
            {
              CUP$result = new symbol(/*complex_instruction*/9);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // simple_instruction ::= Insn Str 
            {
              CUP$result = new symbol(/*simple_instruction*/32);
              
            classFile.plantString((/*i*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val, (/*n*/(str_token)CUP$stack.elementAt(CUP$top-0)).str_val);
        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // simple_instruction ::= Insn Word Word 
            {
              CUP$result = new symbol(/*simple_instruction*/32);
              
            classFile.plant((/*i*/(str_token)CUP$stack.elementAt(CUP$top-2)).str_val, (/*n1*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val, (/*n2*/(str_token)CUP$stack.elementAt(CUP$top-0)).str_val);
        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // simple_instruction ::= Insn Word Int 
            {
              CUP$result = new symbol(/*simple_instruction*/32);
              
            classFile.plant((/*i*/(str_token)CUP$stack.elementAt(CUP$top-2)).str_val, (/*n*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val, (/*n2*/(int_token)CUP$stack.elementAt(CUP$top-0)).int_val);
        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // simple_instruction ::= Insn Word 
            {
              CUP$result = new symbol(/*simple_instruction*/32);
              
            classFile.plant((/*i*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val, (/*n*/(str_token)CUP$stack.elementAt(CUP$top-0)).str_val);
        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // simple_instruction ::= Insn Num 
            {
              CUP$result = new symbol(/*simple_instruction*/32);
              
            classFile.plant((/*i*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val, (/*n*/(num_token)CUP$stack.elementAt(CUP$top-0)).num_val);
        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // simple_instruction ::= Insn Int 
            {
              CUP$result = new symbol(/*simple_instruction*/32);
              
            classFile.plant((/*i*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val, (/*n*/(int_token)CUP$stack.elementAt(CUP$top-0)).int_val);
        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // simple_instruction ::= Insn Int Int 
            {
              CUP$result = new symbol(/*simple_instruction*/32);
              
            classFile.plant((/*i*/(str_token)CUP$stack.elementAt(CUP$top-2)).str_val, (/*n1*/(int_token)CUP$stack.elementAt(CUP$top-1)).int_val, (/*n2*/(int_token)CUP$stack.elementAt(CUP$top-0)).int_val);
        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // simple_instruction ::= Insn 
            {
              CUP$result = new symbol(/*simple_instruction*/32);
              
            classFile.plant((/*i*/(str_token)CUP$stack.elementAt(CUP$top-0)).str_val);
        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // instruction ::= complex_instruction 
            {
              CUP$result = new symbol(/*instruction*/16);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // instruction ::= simple_instruction 
            {
              CUP$result = new symbol(/*instruction*/16);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // set_expr ::= Word Str 
            {
              CUP$result = new symbol(/*set_expr*/31);
               scanner.dict.put((/*name*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val, (/*v*/(str_token)CUP$stack.elementAt(CUP$top-0))); 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // set_expr ::= Word Num 
            {
              CUP$result = new symbol(/*set_expr*/31);
               scanner.dict.put((/*name*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val, (/*v*/(num_token)CUP$stack.elementAt(CUP$top-0))); 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // set_expr ::= Word Word 
            {
              CUP$result = new symbol(/*set_expr*/31);
               scanner.dict.put((/*name*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val, (/*v*/(str_token)CUP$stack.elementAt(CUP$top-0))); 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // set_expr ::= Word Int 
            {
              CUP$result = new symbol(/*set_expr*/31);
               scanner.dict.put((/*name*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val, (/*v*/(int_token)CUP$stack.elementAt(CUP$top-0))); 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // catch_expr ::= classname FROM Word TO Word USING Word 
            {
              CUP$result = new symbol(/*catch_expr*/7);
              
            classFile.addCatch((/*aclass*/(str_token)CUP$stack.elementAt(CUP$top-6)).str_val,
                            (/*fromlab*/(str_token)CUP$stack.elementAt(CUP$top-4)).str_val, (/*tolab*/(str_token)CUP$stack.elementAt(CUP$top-2)).str_val,
                            (/*branchlab*/(str_token)CUP$stack.elementAt(CUP$top-0)).str_val);
        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // throws_expr ::= classname 
            {
              CUP$result = new symbol(/*throws_expr*/44);
              
            classFile.addThrow((/*s*/(str_token)CUP$stack.elementAt(CUP$top-0)).str_val);
        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // line_expr ::= Int 
            {
              CUP$result = new symbol(/*line_expr*/40);
               classFile.addLine((/*v*/(int_token)CUP$stack.elementAt(CUP$top-0)).int_val); 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // limit_expr ::= Word Int 
            {
              CUP$result = new symbol(/*limit_expr*/22);
              
        // .limit locals
        if ((/*w*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val.equals("locals")
                 || (/*w*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val.equals("vars")) // "vars" for historic reasons
            classFile.setVarSize((short)(/*v*/(int_token)CUP$stack.elementAt(CUP$top-0)).int_val);
        // .limit stack
        else if ((/*w*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val.equals("stack"))
            classFile.setStackSize((short)(/*v*/(int_token)CUP$stack.elementAt(CUP$top-0)).int_val);
        else
            classFile.report_error(".limit expected \"stack\" or \"locals\", but got "
                          + (/*w*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val);
      
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // var_expr ::= Int IS Word Word 
            {
              CUP$result = new symbol(/*var_expr*/45);
              
             classFile.addVar(null, null, (/*name*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val, (/*sig*/(str_token)CUP$stack.elementAt(CUP$top-0)).str_val, (/*reg*/(int_token)CUP$stack.elementAt(CUP$top-3)).int_val);
        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // var_expr ::= Int IS Word Word FROM Word TO Word 
            {
              CUP$result = new symbol(/*var_expr*/45);
              
             classFile.addVar((/*slab*/(str_token)CUP$stack.elementAt(CUP$top-2)).str_val, (/*elab*/(str_token)CUP$stack.elementAt(CUP$top-0)).str_val, (/*name*/(str_token)CUP$stack.elementAt(CUP$top-5)).str_val,
                            (/*sig*/(str_token)CUP$stack.elementAt(CUP$top-4)).str_val, (/*reg*/(int_token)CUP$stack.elementAt(CUP$top-7)).int_val);
        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // code_attr_expr ::= Word Str 
            {
              CUP$result = new symbol(/*code_attr_expr*/46);
              
               classFile.addSootCodeAttr((/*w*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val, (/*v*/(str_token)CUP$stack.elementAt(CUP$top-0)).str_val);    
          
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // directive ::= DCODE_ATTR code_attr_expr 
            {
              CUP$result = new symbol(/*directive*/11);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // directive ::= DSET set_expr 
            {
              CUP$result = new symbol(/*directive*/11);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // directive ::= DCATCH catch_expr 
            {
              CUP$result = new symbol(/*directive*/11);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // directive ::= DTHROWS throws_expr 
            {
              CUP$result = new symbol(/*directive*/11);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // directive ::= DLINE line_expr 
            {
              CUP$result = new symbol(/*directive*/11);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // directive ::= DLIMIT limit_expr 
            {
              CUP$result = new symbol(/*directive*/11);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // directive ::= DVAR var_expr 
            {
              CUP$result = new symbol(/*directive*/11);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // label ::= Word COLON 
            {
              CUP$result = new symbol(/*label*/21);
              
            classFile.plantLabel((/*label*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val);
        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // stmnt ::= 
            {
              CUP$result = new symbol(/*stmnt*/36);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // stmnt ::= label 
            {
              CUP$result = new symbol(/*stmnt*/36);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // stmnt ::= error 
            {
              CUP$result = new symbol(/*stmnt*/36);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // stmnt ::= directive 
            {
              CUP$result = new symbol(/*stmnt*/36);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // stmnt ::= instruction 
            {
              CUP$result = new symbol(/*stmnt*/36);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // statement ::= NT$1 stmnt SEP 
            {
              CUP$result = new symbol(/*statement*/34);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // NT$1 ::= 
            {
              CUP$result = new java_cup.runtime.token(/*NT$1*/60);
               classFile.setLine(scanner.token_line_num); 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // statements ::= statement 
            {
              CUP$result = new symbol(/*statements*/35);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // statements ::= statements statement 
            {
              CUP$result = new symbol(/*statements*/35);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // endmethod ::= DEND METHOD SEP 
            {
              CUP$result = new symbol(/*endmethod*/12);
              
            classFile.endMethod();
        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // defmethod ::= DMETHOD access Word SEP 
            {
              CUP$result = new symbol(/*defmethod*/10);
              
            String split[] = ScannerUtils.splitMethodSignature((/*name*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val);
            classFile.newMethod(split[0], split[1], (/*i*/(int_token)CUP$stack.elementAt(CUP$top-2)).int_val);
        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // method_spec ::= defmethod endmethod 
            {
              CUP$result = new symbol(/*method_spec*/29);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // method_spec ::= defmethod statements endmethod 
            {
              CUP$result = new symbol(/*method_spec*/29);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // method_item ::= method_spec 
            {
              CUP$result = new symbol(/*method_item*/50);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // method_item ::= method_spec method_attrs 
            {
              CUP$result = new symbol(/*method_item*/50);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // method_list ::= method_item 
            {
              CUP$result = new symbol(/*method_list*/28);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // method_list ::= method_list method_item 
            {
              CUP$result = new symbol(/*method_list*/28);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // methods ::= 
            {
              CUP$result = new symbol(/*methods*/30);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // methods ::= method_list 
            {
              CUP$result = new symbol(/*methods*/30);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // item ::= Str 
            {
              CUP$result = new var_token(/*item*/3);
               ((var_token)CUP$result).var_val = (/*s*/(str_token)CUP$stack.elementAt(CUP$top-0)).str_val; 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // item ::= Num 
            {
              CUP$result = new var_token(/*item*/3);
               ((var_token)CUP$result).var_val = (/*n*/(num_token)CUP$stack.elementAt(CUP$top-0)).num_val; 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // item ::= Int 
            {
              CUP$result = new var_token(/*item*/3);
               ((var_token)CUP$result).var_val = new Integer((/*i*/(int_token)CUP$stack.elementAt(CUP$top-0)).int_val); 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // optional_default ::= 
            {
              CUP$result = new var_token(/*optional_default*/2);
               ((var_token)CUP$result).var_val = null; 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // optional_default ::= EQ item 
            {
              CUP$result = new var_token(/*optional_default*/2);
               ((var_token)CUP$result).var_val = (/*v*/(var_token)CUP$stack.elementAt(CUP$top-0)).var_val; 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // field_spec ::= DFIELD access Str Word optional_default SEP 
            {
              CUP$result = new symbol(/*field_spec*/14);
              
            classFile.addField((short)(/*a*/(int_token)CUP$stack.elementAt(CUP$top-4)).int_val, (/*name*/(str_token)CUP$stack.elementAt(CUP$top-3)).str_val, (/*sig*/(str_token)CUP$stack.elementAt(CUP$top-2)).str_val,
                            (/*v*/(var_token)CUP$stack.elementAt(CUP$top-1)).var_val);
        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // field_item ::= field_spec 
            {
              CUP$result = new symbol(/*field_item*/54);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // field_item ::= field_spec field_attrs 
            {
              CUP$result = new symbol(/*field_item*/54);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // field_list ::= field_item 
            {
              CUP$result = new symbol(/*field_list*/13);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // field_list ::= field_list field_item 
            {
              CUP$result = new symbol(/*field_list*/13);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // fields ::= 
            {
              CUP$result = new symbol(/*fields*/15);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // fields ::= field_list 
            {
              CUP$result = new symbol(/*fields*/15);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // implements_spec ::= DIMPLEMENTS classname SEP 
            {
              CUP$result = new symbol(/*implements_spec*/19);
               classFile.addInterface((/*name*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val); 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // implements_list ::= implements_spec 
            {
              CUP$result = new symbol(/*implements_list*/18);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // implements_list ::= implements_list implements_spec 
            {
              CUP$result = new symbol(/*implements_list*/18);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // implements ::= 
            {
              CUP$result = new symbol(/*implements*/17);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // implements ::= implements_list 
            {
              CUP$result = new symbol(/*implements*/17);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // super_spec ::= DSUPER classname SEP 
            {
              CUP$result = new symbol(/*super_spec*/37);
              
            classFile.setSuperClass((/*name*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val);
        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // access_item ::= ABSTRACT 
            {
              CUP$result = new symbol(/*access_item*/4);
               access_val |= RuntimeConstants.ACC_ABSTRACT; 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // access_item ::= INTERFACE 
            {
              CUP$result = new symbol(/*access_item*/4);
               access_val |= RuntimeConstants.ACC_INTERFACE; 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // access_item ::= NATIVE 
            {
              CUP$result = new symbol(/*access_item*/4);
               access_val |= RuntimeConstants.ACC_NATIVE; 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // access_item ::= TRANSIENT 
            {
              CUP$result = new symbol(/*access_item*/4);
               access_val |= RuntimeConstants.ACC_TRANSIENT; 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // access_item ::= VOLATILE 
            {
              CUP$result = new symbol(/*access_item*/4);
               access_val |= RuntimeConstants.ACC_VOLATILE; 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // access_item ::= SYNCHRONIZED 
            {
              CUP$result = new symbol(/*access_item*/4);
               access_val |= RuntimeConstants.ACC_SYNCHRONIZED; 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // access_item ::= FINAL 
            {
              CUP$result = new symbol(/*access_item*/4);
               access_val |= RuntimeConstants.ACC_FINAL; 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // access_item ::= STATIC 
            {
              CUP$result = new symbol(/*access_item*/4);
               access_val |= RuntimeConstants.ACC_STATIC; 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // access_item ::= PROTECTED 
            {
              CUP$result = new symbol(/*access_item*/4);
               access_val |= RuntimeConstants.ACC_PROTECTED; 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // access_item ::= PRIVATE 
            {
              CUP$result = new symbol(/*access_item*/4);
               access_val |= RuntimeConstants.ACC_PRIVATE; 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // access_item ::= PUBLIC 
            {
              CUP$result = new symbol(/*access_item*/4);
               access_val |= RuntimeConstants.ACC_PUBLIC; 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // access_items ::= access_item 
            {
              CUP$result = new symbol(/*access_items*/5);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // access_items ::= access_items access_item 
            {
              CUP$result = new symbol(/*access_items*/5);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // access_list ::= 
            {
              CUP$result = new symbol(/*access_list*/6);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // access_list ::= access_items 
            {
              CUP$result = new symbol(/*access_list*/6);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // access ::= NT$0 access_list 
            {
              CUP$result = new int_token(/*access*/58);
               ((int_token)CUP$result).int_val = access_val; 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$0 ::= 
            {
              CUP$result = new java_cup.runtime.token(/*NT$0*/59);
               access_val = 0; 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // classname ::= Word 
            {
              CUP$result = new str_token(/*classname*/1);
               ((str_token)CUP$result).str_val = ScannerUtils.convertDots((/*w*/(str_token)CUP$stack.elementAt(CUP$top-0)).str_val); 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // class_spec ::= DINTERFACE access classname SEP 
            {
              CUP$result = new symbol(/*class_spec*/8);
              
            classFile.setClass((/*name*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val,
                (short)((/*a*/(int_token)CUP$stack.elementAt(CUP$top-2)).int_val |
                        RuntimeConstants.ACC_SUPER |
                        RuntimeConstants.ACC_INTERFACE));
        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // class_spec ::= DCLASS access classname SEP 
            {
              CUP$result = new symbol(/*class_spec*/8);
              
            classFile.setClass((/*name*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val,
                (short)((/*a*/(int_token)CUP$stack.elementAt(CUP$top-2)).int_val | RuntimeConstants.ACC_SUPER));
        
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // source_spec ::= 
            {
              CUP$result = new symbol(/*source_spec*/33);
              
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // source_spec ::= DSOURCE Word SEP 
            {
              CUP$result = new symbol(/*source_spec*/33);
               classFile.setSource((/*w*/(str_token)CUP$stack.elementAt(CUP$top-1)).str_val); 
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= jas_file EOF 
            {
              CUP$result = new java_cup.runtime.token(/*$START*/0);
              
            }
          /* ACCEPT */
          CUP$parser.done_parsing();
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // jas_file ::= source_spec class_spec super_spec implements class_attrs fields methods 
            {
              CUP$result = new symbol(/*jas_file*/20);
              
            }
          return CUP$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
};

